from dotenv import load_dotenv
import os
import sys
from langchain.prompts import ChatPromptTemplate
from langchain_google_genai import GoogleGenerativeAI
from langchain.schema import StrOutputParser
import streamlit as st

load_dotenv()

chave_api = os.getenv("GOOGLE_API_KEY")

os.environ['PYTHONIOENCODING'] = 'utf-8'
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

def criar_template_do_prompt_1():

    template = """
    Voc√™ √© um professor especialista em criar quest√µes em todos os campos de conhecimento.
    Pense passo a passo e elabore uma avalia√ß√£o com {quantidade} quest√µes do tipo {tipo}, da disciplina {disciplina},
    para alunos do {serie}, sobre o conte√∫do {conteudo} e/ou compet√™ncia/habilidade {habilidade} da BNCC e com n√≠vel de dificuldade {dificuldade}.

    O formato das quest√µes √© um dos seguintes:
    - M√∫ltipla Escolha:
        Cada alternativa deve estar em uma linha separada.
    - Quest√µes:
        Quest√£o 1: 
            a. Resposta 1

            b. Resposta 2

            c. Resposta 3

            d. Resposta 4
        Quest√£o 2: 
            a. Resposta 1

            b. Resposta 2

            c. Resposta 3

            d. Resposta 4
        ...
    - Respostas:
        Resposta 1: a|b|c|d. Justificativa.
        Resposta 2: a|b|c|d. Justificativa.
        ...
    Observa√ß√£o: Quest√µes de m√∫ltipla escolha para alunos do ensino m√©dio devem possuir 5 alternativas.
    - Exemplo:
    - Quest√µes:
    - 1. Qual √© a complexidade de tempo de uma √°rvore de pesquisa bin√°ria balanceada?
        a. O(n)
        b. O(log n)
        c. O(n^2)
        d. O(1)
    - Respostas: 
        1. b.
        Justificativa: A complexidade de tempo de opera√ß√µes em uma √°rvore de pesquisa bin√°ria balanceada √© ùëÇ(log ùëõ) porque a altura da √°rvore √© proporcional a log ùëõ, permitindo buscas, inser√ß√µes e remo√ß√µes em tempo logar√≠tmico.
    - Verdadeiro ou Falso:
    - Quest√µes:
        <Quest√£o1>: <Verdadeiro|Falso>
        <Quest√£o2>: <Verdadeiro|Falso>
            .....
    - Respostas:
        <Resposta1>: <Verdadeiro|Falso>
        <Resposta2>: <Verdadeiro|Falso>
            ...
    - Discursiva:
    - Quest√µes:
        <Quest√£o1>:
        <Quest√£o2>:
        ...
    - Respostas:
        <Resposta1>:
        <Resposta2>:
        ...
    """

    prompt = ChatPromptTemplate.from_template(template)
    prompt.format(quantidade=4, tipo="M√∫ltipla Escolha", disciplina="Ci√™ncias", serie="4¬∫ Ano do Ensino Fundamental", conteudo="Microrganismos", habilidade="", dificuldade="M√©dio")

    return prompt

def criar_template_do_prompt_2():
    template = """
    Dado o contexto: {contexto}
    Voc√™ √© um especialista em inclus√£o educacional.
    Adapte as quest√µes geradas para alunos com defici√™ncia intelectual.

    Existem as seguintes formas de se adaptar quest√µes:
    1. Separar os objetivos da atividade (An√°lise de Tarefas)
    2. Adaptar o Layout
    3. Letras em caixa alta (Comando e alternativas com letras mai√∫sculas)
    4. Adaptar o vocabul√°rio (Simplifique)
    5. Apoio visual (D√™ sugest√µes de imagens adequadas para as quest√µes)
    6. Modelo de exemplo (Mostre um exemplo de como deve ser feita a quest√£o)

    Utilize a(s) forma(s): {forma}
    """
    prompt = ChatPromptTemplate.from_template(template)
    prompt.format(contexto="", forma="[0: '3', 1: '4]")
    return prompt

def criar_chain(prompt_template, llm, chave_api):
    return prompt_template | llm | StrOutputParser()

def main():
    st.title("Gerador de Quest√µes")
    st.write("Crie quest√µes diversas e originais com praticidade.")
    prompt_template_1 = criar_template_do_prompt_1()
    llm = GoogleGenerativeAI(temperature=0.7, model="gemini-1.5-flash")
    chain1 = criar_chain(prompt_template_1, llm, chave_api)
    quantidade = st.number_input("Escolha a quantidade de quest√µes", min_value=1, max_value=10, value=4)
    tipo = st.selectbox("Escolha o tipo de quest√£o", ("M√∫ltipla Escolha", "Verdadeiro ou Falso", "Discursiva"))
    disciplina = st.selectbox("Escolha a disciplina", 
                              ("Portugu√™s", "Matem√°tica", "Geografia", "Hist√≥ria", "Ci√™ncias", "Biologia", "Qu√≠mica", "F√≠sica",
                               "Sociologia", "Filosofia", "Educa√ß√£o F√≠sica", "Ingl√™s", "Espanhol", "Arte"))
    serie = st.selectbox("Escolha a s√©rie dos alunos", ("1¬∫ Ano do Ensino Fundamental",
                                                        "2¬∫ Ano do Ensino Fundamental",
                                                        "3¬∫ Ano do Ensino Fundamental",
                                                        "4¬∫ Ano do Ensino Fundamental",
                                                        "5¬∫ Ano do Ensino Fundamental",
                                                        "6¬∫ Ano do Ensino Fundamental",
                                                        "7¬∫ Ano do Ensino Fundamental",
                                                        "8¬∫ Ano do Ensino Fundamental",
                                                        "9¬∫ Ano do Ensino Fundamental",
                                                        "1¬∫ Ano do Ensino M√©dio",
                                                        "2¬∫ Ano do Ensino M√©dio",
                                                        "3¬∫ Ano do Ensino M√©dio"))
    habilidade = st.text_area("Digite a compet√™ncia/habilidade da BNCC", placeholder="Ex.: (EF01LP15) Agrupar palavras pelo crit√©rio de aproxima√ß√£o de significado (sinon√≠mia) e separar palavras pelo crit√©rio de oposi√ß√£o de significado (anton√≠mia).")
    conteudo = st.text_area("Digite o conte√∫do das quest√µes", placeholder="Ex.: Sinon√≠mia e anton√≠mia")
    dificuldade = st.selectbox("Selecione o n√≠vel de dificuldade", ("F√°cil", "M√©dio", "Dif√≠cil"))

    if 'resposta1' not in st.session_state:
        st.session_state.resposta1 = None

    if 'botao_template_2' not in st.session_state:
        st.session_state.botao_template_2 = False

    if st.button("Gerar Quest√µes"):
        resposta1 = chain1.invoke({"quantidade":quantidade, "tipo":tipo, "disciplina":disciplina, "serie":serie, "conteudo":conteudo, "habilidade":habilidade, "dificuldade":dificuldade})
        st.session_state.resposta1 = resposta1
        st.write("Quest√µes geradas!")
        st.write(resposta1)
        st.session_state.botao_template_2 = True
    
    prompt_template_2 = criar_template_do_prompt_2()
    chain2 = criar_chain(prompt_template_2, llm, chave_api)
    
    if 'botao_template_2' in st.session_state and st.session_state.botao_template_2:
        st.write("Se deseja adaptar a avalia√ß√£o, preencha abaixo:")

        st.write("Op√ß√µes:")
        st.write("1. Separar os objetivos da atividade (An√°lise de Tarefas)")
        st.write("2. Adaptar o Layout")
        st.write("3. Letras em caixa alta")
        st.write("4. Adaptar o vocabul√°rio")
        st.write("5. Apoio visual")
        st.write("6. Modelo de exemplo")

        forma = st.multiselect("Selecione as adapta√ß√µes que devem ser feitas",
                               ["1", "2", "3", "4", "5", "6"])
        if st.button("Quero adaptar essa avali√ß√£o"):
            contexto = st.session_state.resposta1
            resposta2 = chain2.invoke({"contexto":contexto, "forma":forma})
            st.write(resposta2)

main()
    